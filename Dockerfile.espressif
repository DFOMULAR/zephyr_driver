# Zephyr development image for Espressif targets (e.g. ESP32)

# Settings
ARG DEBIAN_VERSION=stable-20241016-slim
# Zephyr 3.7.0 is not working with ESP32S3, see: https://github.com/zephyrproject-rtos/zephyr/issues/71397
#ARG ZEPHYR_RTOS_VERSION=3.7.0
ARG ZEPHYR_RTOS_COMMIT=7e9fb8b51fd9c40bf6673d6a82a612491a27548a
ARG ZEPHYR_SDK_VERSION=0.16.8
ARG TOOLCHAIN_LIST="-t xtensa-espressif_esp32_zephyr-elf -t xtensa-espressif_esp32s2_zephyr-elf -t xtensa-espressif_esp32s3_zephyr-elf"
ARG WGET_ARGS="-q --show-progress --progress=bar:force:noscroll"
ARG VIRTUAL_ENV=/opt/venv

#-------------------------------------------------------------------------------
# Base Image and Dependencies

# Use Debian as the base image
FROM debian:${DEBIAN_VERSION}

# Redeclare arguments after FROM
ARG ZEPHYR_RTOS_VERSION
ARG ZEPHYR_SDK_VERSION
ARG TOOLCHAIN_LIST
ARG WGET_ARGS
ARG VIRTUAL_ENV

# Set default shell during Docker image build to bash
SHELL ["/bin/bash", "-c"]

# Set non-interactive frontend for apt-get to skip any user confirmations
ENV DEBIAN_FRONTEND=noninteractive

# Install base packages
RUN apt-get -y update && \
	apt-get install --no-install-recommends -y \
        ca-certificates \
        file \
        git \
        cmake \
        ninja-build gperf \
        device-tree-compiler \
        wget \
        python3 \
        python3-pip \
        python3-venv \
        xz-utils \
        dos2unix \
        vim \
        nano \
        mc

# Set up a Python virtual environment
ENV VIRTUAL_ENV=${VIRTUAL_ENV}
RUN python3 -m venv ${VIRTUAL_ENV}
ENV PATH="${VIRTUAL_ENV}/bin:$PATH"

# Install west
RUN python3 -m pip install --no-cache-dir west

# Clean up stale packages
RUN apt-get clean -y && \
	apt-get autoremove --purge -y && \
	rm -rf /var/lib/apt/lists/*

# Set up directories
RUN mkdir -p /workspace/ && \
    mkdir -p /opt/toolchains

#-------------------------------------------------------------------------------
# Zephyr RTOS

# Set Zephyr environment variables
ENV ZEPHYR_RTOS_VERSION=${ZEPHYR_RTOS_VERSION}
ENV ZEPHYR_SDK_VERSION=${ZEPHYR_SDK_VERSION}

# Install Zephyr
RUN cd /opt/toolchains && \
	git clone https://github.com/zephyrproject-rtos/zephyr.git && \
	cd zephyr && \
	git checkout ${ZEPHYR_RTOS_COMMIT} && \
	pip3 install -r scripts/requirements-base.txt

# Override the west manifest to only install necessary modules
COPY scripts/espressif/west.yml /opt/toolchains/zephyr/west.yml

# Instantiate west workspace and install tools
RUN cd /opt/toolchains && \
	west init -l zephyr && \
	west update --narrow -o=--depth=1

# Install module-specific blobs
RUN cd /opt/toolchains && \
    west blobs fetch hal_espressif

#-------------------------------------------------------------------------------
# Zephyr SDK

# Install minimal Zephyr SDK
RUN cd /opt/toolchains && \
    wget ${WGET_ARGS} https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZEPHYR_SDK_VERSION}/zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz && \
    tar xf zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz && \
    rm zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz

# Install Zephyr SDK for the specified toolchains
RUN cd /opt/toolchains/zephyr-sdk-${ZEPHYR_SDK_VERSION} && \
    bash setup.sh -c ${TOOLCHAIN_LIST}

# Install host tools
RUN cd /opt/toolchains/zephyr-sdk-${ZEPHYR_SDK_VERSION} && \
    wget ${WGET_ARGS} https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZEPHYR_SDK_VERSION}/hosttools_linux-${HOSTTYPE}.tar.xz && \
    tar xf hosttools_linux-${HOSTTYPE}.tar.xz && \
    rm hosttools_linux-${HOSTTYPE}.tar.xz && \
    bash zephyr-sdk-${HOSTTYPE}-hosttools-standalone-*.sh -y -d .

#-------------------------------------------------------------------------------
# Optional Settings

# Use the "dark" theme for Midnight Commander
ENV MC_SKIN=dark

#-------------------------------------------------------------------------------
# Entrypoint

# Entrypoint script that activates the Python venv and Zephyr env, then opens a bash shell
COPY scripts/espressif/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Set the entrypoint script
ENTRYPOINT ["/entrypoint.sh"]
CMD []
